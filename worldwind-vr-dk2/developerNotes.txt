================== Tasks ==================
Status  |         Description
 TODO   | Use JProfiler to determine where in the code is the best target for optimization
 TODO   | update build.xml to build a distribution with an embedded JVM
 TODO   | some open source background music might be nice
 TODO   | get project on google code with SVN
 TODO   | Select GraphicsDevice in launch dialog, and auto-select based on display indicated by the rift
 TODO   | Buttons/UI to show controls
 TODO   | Buttons to save current location to the locations file
 TODO   | Buttons for changing elevation exaggeration - controller and keyboard
 TODO   | Experiment with adaptive camera speed (i.e. slower at lower altitudes), possibly also eliminating camera momentum.
 TODO	| Independent movement and look?  This is a cool 'native VR' thing that we might be able to pull off because WW is open source with a custom InputHandler
 TODO   | Can we get the 'Place Names' layer working again?
 TODO   | Remove HUD, or make useful inside Rift
 TODO	| 'Fast' monoscopic rendering (rasterize only one eye with GPU, then copy pixels to other half)
 TODO   | Do something reasonable with vsync (unclear if that means turning on or off) 
 TODO   | Update README, publish to various forums that project is ready for people to play with
 TODO   | Create JNLP webstart deployment so demo can be easily launched from browser 
 TODO   | Skew the view frusta for left eye appropriately in VRFlyView.doApply() (see http://www.orthostereo.com/geometryopengl.html and http://www.roadtovr.com/vr-expert-to-oculus-rift-devs-make-sure-youre-doing-3d-right/)

================= Development ==================
**** IDE ****
WorldwindVR is being developed in Eclipse, which can be downloaded at http://www.eclipse.org/downloads/

*** Version Control ****
The WorldwindVR project is hosted in SVN on googlecode. The Subversive Eclipse plugin is available at http://eclipse.org/subversive/

*** Checking out project from SVN ***
(1) svn checkout http://worldwind-vr.googlecode.com/svn/trunk/ worldwind-vr-read-only

*** Installing as an Eclipse Project ***
*needs updating*
(2) Window -> Show View -> Other... -> Git -> Git Repositories
(3) In the Git Repositories window, right click -> Paste Repository Path or URI
(4) Enter your Git account credentials and check 'Store in Secure Store' -> Next -> Next -> Finish
(5) File ->  New -> Java Project 
(6) Create project with name worldwind-vr, which will automatically build a project using the Git directory.
(7) Right click project -> Team -> Share Project -> Git -> Finish (this will actually connect it to Git)

*** Building the Project ***
The project can be built into a distributable with the targets in the build.xml.  Note however, that to use the target
that builds the distributable with an EXE (rather than just a .bat), you will need to install Launch4J from 
http://sourceforge.net/projects/launch4j and point the launch4j.dir property at this installation.

*** Checking out JRift ***
(1) Copy the following to clipboard: https://github.com/38leinaD/JRift.git
(2) Window -> Show View -> Other... -> Git -> Git Repositories
(3) In the Git Repositories window, right click -> Paste Repository Path or URI
(4) Create the JRift directory using wizard.
(5) File ->  New -> Java Project 
(6) Create project with name JRift, which will automatically build a project using the Git directory.
 
================= Other Notes ================

Minecrift probably has the best branch of JRift:
 - https://github.com/mabrowning/JRift

 
Will likely need to use gov.nasa.worldwind.view.firstperson.BasicFlyView

(1) Someone will probably write a JNI wrapper for us, but if not we have to.
(2) Someone will probably (even sooner than JNI) write an OpenGL shader or example that could solve both the lens distortion and SBS frame drawing problem for us.


Notes on Optimization:
 - much CPU seems to go to tiling, which is driven by the TiledImageLayer draw method
  - assembleTiles() and maybe checkTextureExpiration() seem particularly problematic
 - part of the problem may be that WorldWind was not meant for running at a given FPS, maybe we can eliminate 
   some of these calculations on 50%-90% of frames?
 - Mystery: why does frame rate go down at lower resolutions?
  - gov.nasa.worldwind.AbstractSceneController.pick appears to be taking 4X as long (10% of CPU time total at lower resolution)  
 
Issues to document in README
 - where imagery is cached and the likely size 
 - how to fix lilwolf's indexoutofbounds problem
 

============== Fixes for Exceptions you might encounter ===========

*** EXCEPTION ***
Exception in thread "main" java.lang.UnsatisfiedLinkError: C:\Users\dtuohy\AppData\Local\Temp\jogamp_0000\file_cache\jln8738110590367623316\jln2605075625072842271\gluegen-rt.dll: Can't find dependent libraries
	at java.lang.ClassLoader$NativeLibrary.load(Native Method)
	at java.lang.ClassLoader.loadLibrary0(Unknown Source)
	at java.lang.ClassLoader.loadLibrary(Unknown Source)
	at java.lang.Runtime.load0(Unknown Source)
	at java.lang.System.load(Unknown Source)
	at com.jogamp.common.jvm.JNILibLoaderBase.loadLibraryInternal(JNILibLoaderBase.java:437)
	at com.jogamp.common.jvm.JNILibLoaderBase.access$000(JNILibLoaderBase.java:59)

*** SOLUTION ***
Make sure you are running with a 32-bit version of Java.
	
*** PROBLEM ***
Xbox 360 controller is not being recognized

*** SOLUTION ***
You may have to explicitly update the driver from the device manager.  See this video: https://www.youtube.com/watch?v=E90hUoipVNw